#!/bin/sh -e
## Create an empty jail and set its environment.
##
## The jail's ezjail.flavour script is automatically run within the
## jail when it is first started.
## This script checks for the jail-create.preinit and jail-create.postinit
## files located in the flavor directory. These are run from the host.

#shoud be something like /usr/local/opt/kola
APP_ROOT="$(cd $(dirname $(readlink -f $0))/../../../..; pwd)"
#add current user to jail by default (even if sudo'd)
JAIL_USER="$(who -m | cut -d ' ' -f1)"
#by default use the loopback clone defined in /etc/rc.conf. Avoid reuse between jails.
JAIL_IP='192.168.0.1'

print_help () {
  echo "Usage: $(basename $0) [options]" >&2;
  echo "Options:" >&2;
  echo " -i=ipaddr  Address to bind jail to [$JAIL_IP]" >&2;
  echo " -t=type    Jail type (see $APP_ROOT/jails)" >&2;
  echo " -j=id      Id of jail [default is type]" >&2;
  echo " -u=user    Add user to jail [default is current user]" >&2;
  echo " -h         Print this help message" >&2;
}

if [ $(id -u) != 0 ]; then
  echo "This script must be run as root." 1>&2
  exit 1
fi

## Parse options

while getopts "j:i:t:u:" opt; do
  case $opt in
    j) JAIL_ID="$OPTARG";;
    i) JAIL_IP="$OPTARG";;
    t) JAIL_TYPE="$OPTARG";;
    u) JAIL_USER="$OPTARG";;
    h) print_help; exit 0;;
    \?) print_help; exit 1;;
  esac
done

if [ -z "$JAIL_TYPE" ]; then JAIL_TYPE='default'; fi

if [ ! -d "$APP_ROOT/jails/$JAIL_TYPE" ]; then
  echo "Jail type '$JAIL_TYPE' doesn't exist, aborting." >&2
  exit 1
fi

if jls -v | grep "$JAIL_IP" > /dev/null; then
  echo -n "Address $JAIL_IP already used, you may experience network problems." 1>&2
  read -p " Continue? (y/n) " reply
  if [ "$reply" != 'y' -a "$reply" != 'yes' ]; then
    exit 0
  fi
fi

#if no id given, use typeN
if [ -z "$JAIL_ID" ]; then
  #get the last jid (jid is incremented on start/restart)
  jid=$(jls | tail -1 | awk '{print $1}')
  if [ $jid == 'JID' ]; then
    jid=0
  else
    #1 plus the last jid at least guarantees a unique name, not descriptive though
    jid=$((jid+1))
  fi
  JAIL_ID="${JAIL_TYPE}$jid"
fi

## Helper functions

cp_conf () {
  local srcpath="$1" destdir="$2" replacevars="$3" ignorevars="$4"
  env REPLACE_VARS="$replacevars JAIL_ID JAIL_IP JAIL_TYPE JAIL_USER JAIL_CONF_DIR" \
      NO_REPLACE_VARS="$ignorevars" \
      JAIL_ID="$JAIL_ID" \
      JAIL_IP="$JAIL_IP" \
      JAIL_TYPE="$JAIL_TYPE" \
      JAIL_USER="$JAIL_USER" \
      JAIL_CONF_DIR="$APP_ROOT/jails/$jailtype" \
      sh -e "$APP_ROOT/src/cp-conf.sh" "$srcpath" "$destdir"
}

run_host_script () {
  local jailtype="$1" jailscript="$2"

  if [ -f "$APP_ROOT/jails/$jailtype/$jailscript" ]; then
    echo "Running $jailscript for '$jailtype' ..."
    if ! env JAIL_ID="$JAIL_ID" \
         JAIL_IP="$JAIL_IP" \
         JAIL_TYPE="$JAIL_TYPE" \
         JAIL_USER="$JAIL_USER" \
         JAIL_CONF_DIR="$APP_ROOT/jails/$jailtype" \
         sh -e "$APP_ROOT/jails/$jailtype/$jailscript"; then
      echo "Error running '$jailtype/$jailscript', continuing" >&2
    fi
  fi
}

run_jail_script () {
  local jailtype="$1" jailscript="$2"

  if [ -f "$APP_ROOT/jails/$jailtype/$jailscript" ]; then
    mkdir -p "/usr/jails/$JAIL_ID/tmp/$jailtype"

    if ! mount_nullfs "$APP_ROOT/jails/$jailtype" "/usr/jails/$JAIL_ID/tmp/$jailtype"; then
      echo "In '$jailtype/$jailscript', unable to mount $APP_ROOT/jails/$jailtype directory within jail, skipping" >&2
    else
      echo "Running $jailscript for '$jailtype' ..."
      if ! env JAIL_ID="$JAIL_ID" \
           JAIL_IP="$JAIL_IP" \
           JAIL_TYPE="$JAIL_TYPE" \
           JAIL_USER="$JAIL_USER" \
           JAIL_CONF_DIR="/tmp/$jailtype" \
           jexec "$JAIL_ID" sh -e "/tmp/$jailtype/$jailscript"; then
        echo "Error running '$jailtype/$jailscript', continuing" >&2
      fi
      umount "/usr/jails/$JAIL_ID/tmp/$jailtype"
    fi
    rm -rf "/usr/jails/$JAIL_ID/tmp/$jailtype"
  fi
}

## Create

ezjail-admin create "$JAIL_ID" "$JAIL_IP"

## Preinit
## Modify config dir before copying into jail.

run_host_script "default" "preinit"

if [ "$JAIL_TYPE" != "default" ]; then
  run_host_script "$JAIL_TYPE" "preinit"
fi

# Copy jail config to host

if [ -d "$APP_ROOT/jails/default/host" ]; then
  cp_conf "$APP_ROOT/jails/default/host" /
fi
if [ "$JAIL_TYPE" != "default" -a -d "$APP_ROOT/jails/$JAIL_TYPE/host" ]; then
  cp_conf "$APP_ROOT/jails/$JAIL_TYPE/host" /
fi

## Init
## Start jail and run scripts within it.

echo "Initializing jail ..."

ezjail-admin start "$JAIL_ID"

run_jail_script "default" "init"

if [ "$JAIL_TYPE" != "default" ]; then
  run_jail_script "$JAIL_TYPE" "init"
fi

# Copy jail config to jail after init has chance to install packages

if [ -d "$APP_ROOT/jails/default/jail" ]; then
  cp_conf "$APP_ROOT/jails/default/jail" "/usr/jails/$JAIL_ID"
fi
if [ "$JAIL_TYPE" != "default" -a -d "$APP_ROOT/jails/$JAIL_TYPE/jail" ]; then
  cp_conf "$APP_ROOT/jails/$JAIL_TYPE/jail" "/usr/jails/$JAIL_ID"
fi

## Postinit

run_host_script "default" "postinit"

if [ "$JAIL_TYPE" != "default" ]; then
  run_host_script "$JAIL_TYPE" "postinit"
fi

ezjail-admin restart "$JAIL_ID"

echo "$JAIL_ID jail running on $JAIL_IP"
