#!/bin/sh -e

INIT_URL="https://bitbucket.org/hazelnut/serverconf/raw/master/src/host-init.sh"
INIT_ARGS=''

print_help () {
  echo "Initialize a newly created FreeBSD remote server." >&2;
  echo "Usage: $(basename $0) [options] host" >&2;
  echo " -k=pubkey    Public key for host's app user" >&2;
  echo " -U=username  Repo user (https://bitbucket.org/hazelnut/serverconf)" >&2;
  echo " -P=password  Repo user password" >&2;
}

while getopts "U:P:k:h" opt; do
  case $opt in
    U) REPO_USER="$OPTARG"; INIT_ARGS="$INIT_ARGS -U '$OPTARG'";;
    P) REPO_PASS="$OPTARG"; INIT_ARGS="$INIT_ARGS -U '$OPTARG'";;
    k) PUBKEY="$OPTARG";;
    h) print_help; exit 0;;
    \?) print_help; exit 1;;
  esac
done

for lastarg; do true; done
HOST_NAME="$lastarg"

if [ -z "$HOST_NAME" ]; then
  print_help
  exit 1
fi

#convert local ssh pub key file to string to pass as host-init parameter
if [ -f "$PUBKEY" ]; then PUBKEY="$(cat $PUBKEY)"; fi
if [ -n "$PUBKEY" ]; then INIT_ARGS="$INIT_ARGS -k '$PUBKEY'"; fi


# Need the repo info here so we can download from the auth url
repo_host=$(echo "$INIT_URL" | awk -F/ '{print $3}')

if [ -z "$REPO_USER" ]; then
  read -p "'$repo_host' username: " REPO_USER
  INIT_ARGS="$INIT_ARGS -U '$REPO_USER'"
fi

if [ -z "$REPO_PASS" ]; then
  stty -echo
  read -p "'$repo_host' password: " REPO_PASS; echo
  stty echo
  INIT_ARGS="$INIT_ARGS -P '$REPO_PASS'"
fi

repo_auth_url="https://$REPO_USER:$REPO_PASS@${INIT_URL#*//}"


# Run as $USER
syscheck_script="sh -e -c '

if [ \$(uname -s) != '\"FreeBSD\"' ]; then
  echo '\"This script can only configure a FreeBSD server.\"';
  exit 1;
fi

if [ \$(id -u) != 0 ];
  then echo -n \"Must run as superuser. \";
fi
'"

#pseudo-distinct filename to store the downloaded bootstrap script
init_file="/tmp/$(basename $INIT_URL).$(date +%s)"

# Run as root
# This kind of escaping is painful and error prone, do as little as possible.
# Do not create vars in here, just access external ones on the first substition.
# To quote strings use: '\"my string\"'
init_script="su - root -f -c 'sh -e -c \"

if ! fetch -q --no-verify-peer --user-agent '\"Wget/1.16\"' -o $init_file '\"$repo_auth_url\"'; then
  echo '\"Error downloading $init_file, exiting.\"';
  exit 1;

else
  if [ -e $init_file ]; then
    sh -e $init_file '\"$INIT_ARGS\"';
  else
    echo Unable to find init script, exiting.;
    exit 1;
  fi
fi
\" ' "


# Run local or remote
if [ "$HOST_NAME" == 'localhost' -o "$HOST_NAME" == '127.0.0.1' -o "$HOST_NAME" == '::1' ]; then
  sh -e -c "$syscheck_script; $init_script;"
else
  ssh -X -t -t "$HOST_NAME" "$syscheck_script; $init_script;"
fi
